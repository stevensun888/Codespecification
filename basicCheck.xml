<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "http://checkstyle.sourceforge.net/config_design.html"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

	<!-- 所有的配置都有一个根模块Checker -->
<module name="Checker">
         <property name="severity" value="warning"/>
	<!-- 严格检查重复代码 -->
    <module name="StrictDuplicateCode">
        <property name="charset" value="utf-8" />   
    </module>  


    <!-- 检查Java源文件的语法树 -->
    <module name="TreeWalker">
	
        <!-- 命名检查 -->
        <!-- 局部的final变量，包括catch中的参数的检查 -->
        <module name="LocalFinalVariableName" />
        <!-- 局部的非final型的变量，包括catch中的参数的检查 -->
        <module name="LocalVariableName" />
        <!-- 包名的检查（只允许小写字母），默认^[a-z]+(\.[a-zA-Z_][a-zA-Z_0-9_]*)*$ -->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$" />
            <message key="name.invalidPattern" value="包名 ''{0}'' 要符合 ''{1}''格式."/>
        </module>
        <!-- 检查静态的，非final类型的变量名。 -->
        <module name="StaticVariableName" />
        <!-- Class或Interface名检查，默认^[A-Z][a-zA-Z0-9]*$-->
        <module name="TypeName">
            <property name="severity" value="warning"/>
            <message key="name.invalidPattern" value="名称 ''{0}'' 要符合 ''{1}''格式."/>
        </module>
        <!-- 非static型变量的检查 -->
        <module name="MemberName" />
        <!-- 方法名的检查 -->
        <module name="MethodName">  
			<property name="severity" value="warning"/>  
			<property name="format" value="(^[a-z][a-zA-Z0-9]{0,14}$)"/>  
			<message key="name.invalidPattern" value="名称 ''{0}''必须符合以下正则表达式 ''{1}''."/>
			<message key="method.name.equals.class.name" value="名称 ''{0}'' 不能与内部类名称相同."/>  
		</module>
        <!-- 方法的参数名 -->
        <module name="ParameterName " />
        <!-- 常量名的检查（只允许大写），默认^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$ -->
        <module name="ConstantName" />
		

		
        <!-- 定义检查 -->
        <!-- 检查数组类型的定义是String[] args，而不是String args[] -->   
        <module name="ArrayTypeStyle" />
        <!-- 检查long型定义是否有大写的“L” -->
        <module name="UpperEll"/>
		<!-- 检查工具类是否有public的构造器 -->
        <module name="HideUtilityClassConstructor"/>
        <!-- 检查接口是否仅定义类型 -->
        <module name="InterfaceIsType"/>
		<!-- 检查变量是否对外部可见 -->
        <module name="VisibilityModifier"/>


        <!-- import检查-->
        <!-- 避免使用* -->
        <module name="AvoidStarImport"/>
        <!-- 检查是否从非法的包中导入了类 -->
        <module name="IllegalImport"/>
        <!-- 检查是否导入了多余的包 -->
        <module name="RedundantImport"/>
        <!-- 没用的import检查，比如：1.没有被用到2.重复的3.import java.lang的4.import 与该类在同一个package的 -->
        <module name="UnusedImports" />
			<property name="ignoreAnnotation" value="false"/>
		</module>
		

        <!-- 长度检查 -->
        <!-- 每行不超过150个字符 -->
        <module name="LineLength">
            <property name="max" value="150" />
        </module>
        <!-- 方法不超过150行 -->
        <module name="MethodLength">
            <property name="tokens" value="METHOD_DEF" />
            <property name="max" value="150" />
        </module>
		<!-- 检查java代码的缩进 默认配置：缩进 4个空格-->   
        <module name="Indentation" />  

		
        <!-- 空格检查-->
        <!-- 方法名后跟左圆括号"(" -->
        <module name="MethodParamPad" />
        <!-- 在类型转换时，不允许左圆括号右边有空格，也不允许与右圆括号左边有空格 -->
        <module name="TypecastParenPad" />
        <!-- 检查遍历 -->
        <module name="EmptyForIteratorPad"/>
        <!-- 检查分隔符是否在空白之后 -->
        <module name="WhitespaceAfter"/>
        <!-- 检查分隔符周围是否有空白 -->
        <module name="WhitespaceAround"/>

		
		<!-- 关键字检查 -->   
        <!-- 每个关键字都有正确的出现顺序。比如 public static final 是对一个常量的声明。如果使用 static public final 就是错误的  -->   
        <module name="ModifierOrder" />   
        <!-- 检查接口和annotation中是否有多余修饰符，如接口方法不必使用public -->
        <module name="RedundantModifier"/>

		
		<!-- coding检查 -->
		<!-- 不允许出现任何魔法值（即未经定义的常量）直接出现在代码中 -->
		<module name="MagicNumber">
			<property name="ignoreHashCodeMethod" value="false"/>
			<property name="ignoreAnnotation" value="false"/>
		</module>
		<!-- 检查空的代码段 -->
        <module name="EmptyStatement"/>
		<!-- 检查在重写了equals方法后是否重写了hashCode方法 -->
        <module name="EqualsHashCode"/>
        <!-- 检查子表达式中是否有赋值操作 -->
        <module name="InnerAssignment"/>
        <!-- 检查switch语句是否有default -->
        <module name="MissingSwitchDefault"/>
        <!-- 检查是否有过度复杂的布尔表达式 -->
        <module name="SimplifyBooleanExpression"/>
        <!-- 检查是否有过于复杂的布尔返回代码段 -->
        <module name="SimplifyBooleanReturn"/>
		<!-- 检查default的clause是否在switch代码段的最后 -->
        <module name="DefaultComesLast"/>
		<!-- 检查局部变量或参数不会对其同一类中定义的字段进行遮蔽 -->
		<module name="HiddenField">
			<property name="ignoreAbstractMethods" value="true"/>
			<property name="tokens" value="VARIABLE_DEF"/>
			<property name="ignoreConstructorParameter" value="true"/>
			<property name="ignoreSetter" value="true"/>
		</module>
		<!-- 这项检查可以用来确保类型不能抛出指定的异常类型。从不允许抛出java.lang.Error或java.lang.RuntimeException。 -->
		<module name="IllegalThrows" />
		<!-- clone方法必须调用了super.clone() -->   
        <module name="SuperClone" />   
        <!-- finalize 必须调用了super.finalize() -->   
        <module name="SuperFinalize" />   
        <!-- 不能catch java.lang.Exception -->   
        <module name="IllegalCatch">   
            <property name="illegalClassNames" value="java.lang.Exception" />  
        </module>
		
		
		<!-- 度量（Metrics）检查 -->
		<!-- 检查循环复杂度是否超出了指定的限值,默认10 -->
		<module name="CyclomaticComplexity">
			<property name="max" value="10"/>
		</module>
		<!-- 限制一个表达式中的&&、||、&、|、^等逻辑运算符的数量，默认3 -->
		<module name="BooleanExpressionComplexity">
			<property name="max" value="3"/>
		</module>
		
        <!-- 代码块（block）检查 -->
        <!-- 检查是否有空代码块 -->
        <module name="EmptyBlock"/>
        <!-- 检查左大括号位置 -->
        <module name="LeftCurly"/>
        <!-- 检查代码块是否缺失{} -->
        <module name="NeedBraces"/>
        <!-- 检查右大括号位置 -->
        <module name="RightCurly"/>
		
		
		<!-- 正则表达式（Regexp）检查 -->
		<!-- 检查代码中是否使用了System.out.print等-->
        <module name="Regexp">
          <property name="format" value="System\.out\.println"/>
          <property name="illegalPattern" value="true"/>
          <property name="ignoreComments" value="true"/>
        </module>
		
</module>